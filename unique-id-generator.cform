{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Create DynamoDB table, where TTL-deleted items are moved to an S3 bucket (all in a private VPC via VPC Endpoints)",
  "Parameters": {
    "Base" : {
      "Description" : "The base used for the unique identifier generation",
      "Type" : "Number",
      "Default" : "62",
      "AllowedValues" : [ "56", "58", "62", "64" ]
    },
    "DDBEndpointPrefixList" : {
      "Description" : "The prefix list 'pl-xxxxxxx' value for DynamoDB in the deployment region.  Use 'aws ec2 describe-prefix-lists'",
      "Type" : "String"
    },
    "EnableReplication" : {
      "Description" : "Whether replication should be enabled (adds a stream to the table to allow subsequent replication by Lambda)",
      "Default" : "false",
      "Type" : "String",
      "AllowedValues" : [ "true", "false" ]
    },
    "EnableXRay" : {
      "Description" : "If true, the permissions and settings will be added for the Lambda to push traces to AWS X-Ray",
      "Default" : "false",
      "Type" : "String",
      "AllowedValues" : [ "true", "false" ]
    },
    "ProvisionedReadCapacityUnits" : {
      "Description" : "The read IOPS for the table",
      "Type" : "Number",
      "Default" : "5"
    },
    "ProvisionedWriteCapacityUnits" : {
      "Description" : "The write IOPS for the table",
      "Type" : "Number",
      "Default" : "5"
    },
    "Length" : {
      "Description" : "The length (bytes) of the unique identifier",
      "Type" : "Number",
      "Default" : "10"
    },
    "XRayTraceMode" : {
      "Description" : "If XRay is enabled, this sets the tracing mode",
      "Type" : "String",
      "Default" : "PassThrough",
      "AllowedValues" : [ "Active", "PassThrough" ]
    },
    "VPCTemplateURL" : {
      "Description" : "The URL to the template to create the VPC (see https://github.com/gford1000-aws/vpc/blob/master/create_vpc.cform)",
      "Type" : "String"
    } 
  },
  "Conditions" : {
    "ReplicationRequired" : { "Fn::Equals" : [ { "Ref" : "EnableReplication" }, "true" ] },
    "AddXRayTracing" : { "Fn::Equals" : [ { "Ref" : "EnableXRay" }, "true" ] }
  },
  "Resources": {
    "VPC" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "Parameters" : {
          "CidrAddress" : "10.0",
          "CreatePublicSubnet" : "false",
          "EnableDnsSupport" : "true",
          "PrivateSubnetCount" : "3"
        },
        "TemplateURL" : { "Ref" : "VPCTemplateURL" }
      }
    },
    "DynamoDBTable" : {
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "AttributeDefinitions" : [
          {
            "AttributeName" : "UniqueId",
            "AttributeType" : "S"
          }
        ],
        "KeySchema" : [
          {
            "AttributeName" : "UniqueId",
            "KeyType" : "HASH"
          }
        ],
        "ProvisionedThroughput" : {
          "ReadCapacityUnits" : { "Ref" : "ProvisionedReadCapacityUnits" },
          "WriteCapacityUnits" : { "Ref" : "ProvisionedWriteCapacityUnits" }
        },
        "StreamSpecification" : {
          "Fn::If" : [
            "ReplicationRequired",
            { "StreamViewType" : "NEW_IMAGE" },
            { "Ref" : "AWS::NoValue" }
          ]
        }
      }
    },
    "DynamoDBEndpoint" : {
      "Type" : "AWS::EC2::VPCEndpoint",
      "Properties" : {
        "PolicyDocument" : {
          "Version":"2012-10-17",
          "Statement": [
            {
              "Effect" : "Allow",
              "Principal" : "*",
              "Action" : "dynamodb:PutItem",
              "Resource": [ { "Fn::Sub": [ "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}", 
                    { 
                        "Region": { "Ref" : "AWS::Region" }, 
                        "Account": { "Ref" : "AWS::AccountId" }, 
                        "TableName" : { "Ref" : "DynamoDBTable" }
                    } 
                ] } 
              ] 
            }
          ]
        },
        "RouteTableIds" : [ { "Fn::GetAtt" : [ "VPC", "Outputs.PrivateSubnetRouteTable" ] } ],
        "ServiceName" : { "Fn::Sub" : [ "com.amazonaws.${Region}.dynamodb", { "Region" : { "Ref" : "AWS::Region" } } ] },
        "VpcId" : { "Fn::GetAtt" : [ "VPC", "Outputs.VPC" ] }
      }
    },
    "Lambda" : {
      "Type": "AWS::Lambda::Function",
      "DependsOn" : "VPC",
      "Properties" : {
        "Code" : {
          "ZipFile" : {
            "Fn::Join": [
              "\n",
              [
                "import boto3",
                "import botocore.exceptions",
                "import os",
                "import random",
                "",
                "TABLE_NAME = os.environ['TableName']",
                "BASE = os.environ['Base']",
                "LENGTH = os.environ['Length']",
                "",
                "CHARS = {",
                "    '56' : '23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz',",
                "    '58' : '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz',",
                "    '62' : '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',",
                "    '64' : '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-='",
                "}",
                "",
                "CLIENT = boto3.client('dynamodb')",
                "",
                "def generate_unique_id(base, length):",
                "    unique_id = []",
                "    for x in range(0, length):",
                "        unique_id.append( CHARS[base][random.randint(0, len(CHARS[base])-1)] )",
                "    return ''.join(unique_id)",
                "",
                "def create_identifier(base, length):",
                "    clashes = -1",
                "    while True:",
                "        clashes = clashes + 1",
                "        unique_id = generate_unique_id(base, length)",
                "        try:",
                "            CLIENT.put_item(",
                "                TableName = TABLE_NAME,",
                "                Item = { 'UniqueId' : { 'S' : unique_id } },",
                "                ReturnValues = 'ALL_OLD',",
                "                ConditionExpression = 'attribute_not_exists(UniqueId)')",
                "            break",
                "        except botocore.exceptions.ClientError as e:",
                "            if e.response['Error']['Code'] != 'ConditionalCheckFailedException':",
                "                raise Exception(\"Internal error ({})\".format(e))",
                "    print('Generated {} after {} clashes'.format(unique_id, clashes))",
                "    return unique_id",
                "",
                "def parse_event(event):",
                "    base = str(event.get('Base', BASE))",
                "    if base not in CHARS.keys():",
                "        raise Exception('Invalid value for Base.  Must be one of [{}]'.format(','.join(CHARS.keys())))",
                "    try:",
                "        length = int(event.get('Length', LENGTH))",
                "    except:",
                "        raise Exception('Invalid value for Length.  Must be a numeric string')",
                "    if length < 6:",
                "        raise Exception('Invalid value for Length.  Must be greater than 5')",
                "    return (base, length)",
                "",
                "def lambda_handler(event, context):",
                "    (base, length) = parse_event(event)",
                "    return create_identifier(base, length)"
              ]
            ]
          }
        },
        "Description" : "Unique identifier generator",
        "Environment" : {
            "Variables" : {
                "TableName" : { "Ref": "DynamoDBTable" },
                "Base" : { "Ref": "Base" },
                "Length" : { "Ref": "Length" }
            }
        },
        "Handler" : "index.lambda_handler",
        "MemorySize" : 128,
        "Role" : { "Fn::GetAtt": [ "LambdaRole", "Arn" ] },
        "Runtime" : "python2.7",
        "Timeout" : 5,
        "TracingConfig" : {
          "Fn::If" : [
            "AddXRayTracing",
            { "Mode" : { "Ref" : "XRayTraceMode" } },
            { "Ref" : "AWS::NoValue" }
          ]
        },
        "VpcConfig" : {
            "SecurityGroupIds" : [ { "Ref" : "LambdaSecurityGroup" }],
            "SubnetIds" : { "Fn::Split" : [ ",", { "Fn::GetAtt" : [ "VPC", "Outputs.PrivateSubnets" ] } ] }
        }
      }
    },
    "LambdaLogGroup" : {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "LogGroupName" : { "Fn::Sub" : [ "/aws/lambda/${Name}", { "Name" : { "Ref" : "Lambda" } } ] },
        "RetentionInDays" : "7"
      }
    },
    "LambdaSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Security Group for Lambda Egress",
        "VpcId" : { "Fn::GetAtt" : [ "VPC", "Outputs.VPC" ] },
        "SecurityGroupEgress" : [
          {
            "DestinationPrefixListId" : { "Ref" : "DDBEndpointPrefixList" },
            "IpProtocol" : "-1" 
          }
        ]
      }
    },
    "LambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": {
                "Fn::If" : [
                  "AddXRayTracing",
                  [
                    {
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": "arn:aws:logs:*:*:*",
                      "Effect": "Allow"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "xray:PutTraceSegments",
                        "xray:PutTelemetryRecords"
                      ],
                      "Resource": [
                        "*"
                      ]
                    },                   
                    {
                      "Effect" : "Allow",
                      "Action" : [ 
                        "dynamodb:PutItem"
                      ],
                      "Resource": [ 
                        { 
                          "Fn::Sub": [ 
                            "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}", 
                            { 
                              "Region": { "Ref" : "AWS::Region" }, 
                              "Account": { "Ref" : "AWS::AccountId" }, 
                              "TableName" : { "Ref" : "DynamoDBTable" }
                            } 
                          ] 
                        }                    
                      ]
                    },
                    {
                      "Effect":"Allow",
                      "Action":[ 
                        "ec2:CreateNetworkInterface",
                        "ec2:DescribeNetworkInterfaces",
                        "ec2:DeleteNetworkInterface"
                      ],
                      "Resource": [ 
                        "*"
                      ]
                    }
                  ],
                  [
                    {
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": "arn:aws:logs:*:*:*",
                      "Effect": "Allow"
                    },
                    {
                      "Effect" : "Allow",
                      "Action" : [ 
                        "dynamodb:PutItem"
                      ],
                      "Resource": [ 
                        { 
                          "Fn::Sub": [ 
                            "arn:aws:dynamodb:${Region}:${Account}:table/${TableName}", 
                            { 
                              "Region": { "Ref" : "AWS::Region" }, 
                              "Account": { "Ref" : "AWS::AccountId" }, 
                              "TableName" : { "Ref" : "DynamoDBTable" }
                            } 
                          ] 
                        }                    
                      ]
                    },
                    {
                      "Effect":"Allow",
                      "Action":[ 
                        "ec2:CreateNetworkInterface",
                        "ec2:DescribeNetworkInterfaces",
                        "ec2:DeleteNetworkInterface"
                      ],
                      "Resource": [ 
                        "*"
                      ]
                    }
                  ]
                ]
              }
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "UniqueIdGeneratorArn" : {
      "Description" : "The Arn of the Unique Id Generator function",
      "Value" : { "Fn::GetAtt" : [ "Lambda", "Arn" ] }
    },
    "TableStreamArn" : {
      "Description" : "The Arn to the Unique Id DynamoDB table stream, for replication support (if enabled)",
      "Value" : {
        "Fn::If" : [
          "ReplicationRequired",
          { "Fn::GetAtt" : [ "DynamoDBTable", "StreamArn" ] },
          ""
        ]
      }
    }
  }
}
